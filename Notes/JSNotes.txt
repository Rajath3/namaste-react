Async is a function that returns promise.
If we just return value, it will wrap it inside a promise and return.

const prom = new Promise((resolve, reject) => {
    resolve('Resolved')
})

// Older way to resolve promise before await
const func1 = async () => {
    prom.then((res) => console.log(res))
}

// Now
const func2 = async () => {
    const val = await prom;
    console.log(val);
}

Await can only be used inside async function


Let's say we have 2 promises

const prom1 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('Resolved 1');
        resolve();
    }, 10000)
})

const prom2 = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log('Resolved 2');
        resolve();
    }, 10000)
})


const func3 = async () => {
    const val = await prom1;
    console.log("Hello 1");

    const val2 = await prom2;
    console.log("Hello 2");
}

func3()

Now let's suppose we give
prom1 - 5000
prom2 - 10000

Then it will print
After 5 seconds

Resolved 1 
Hello 1

After another 5 seconds
Resolved 2
Hello 2


Now let's suppose we give
prom1 - 10000
prom2 - 5000

Then it will print
After 10 seconds

Resolved 1 
Hello 1
// This is already resolved in 5th second
Resolved 2
Hello 2


Real world examples:

1. Fetch api.

It gives back a response object in a promise, which we should convert to json using promise.

Simple example:

const data = await fetch('https://api.github.com/users/Rajath3')
const jsonData = await data.json()
console.log(jsonData)

Errors inside try catch

Example:

try {
    const data = await fetch('https://api.github.com/users/Rajath3')
    const jsonData = await data.json()
    console.log(jsonData)
} catch(err) {
    console.log(err)
}
